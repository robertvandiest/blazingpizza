@page "/"

@using BlazingPizza.API;
@using BlazingPizza.Portal.Services

@inject OrderStateService OrderStateService
@inject PricingService PricingService
@inject BlazingPizzaApiClient Client

<div class="main">
    <h1>Blazing Pizzas</h1>
    <ul class="pizza-cards">
        @if (_specials != null)
        {
            @foreach (var special in _specials)
            {
                <li @onclick="@(() => OrderStateService.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.BasePrice.ToString("0.00")</span>
                    </div>
                </li>
            }
        }
        @if (OrderStateService.ShowingConfigureDialog)
        {
            <ConfigurePizzaDialog Pizza="OrderStateService.ConfiguringPizza"
                                  OnCancel="OrderStateService.CancelConfigurePizzaDialog"
                                  OnConfirm="OrderStateService.ConfirmConfigurePizzaDialog" />
        }
    </ul>
</div>
<div class="sidebar">
    @if (order.Pizzas != null && order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <div class="item-price">
                        @PricingService.GetFormattedTotalPrice(configuredPizza)
                    </div>
                    <a @onclick="@(() => OrderStateService.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas == null || order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@PricingService.GetFormattedTotalPrice(order)</span>
        <a href="checkout" class="@(OrderStateService.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
    private ICollection<PizzaSpecialDto>? _specials;
    OrderDto order => OrderStateService.Order;

    protected override async Task OnInitializedAsync()
    {
        _specials = await Client.GetPizzaSpecialsAsync();
    }
}